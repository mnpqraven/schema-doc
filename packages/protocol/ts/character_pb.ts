// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file character.proto (package dm.character, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message dm.character.CharacterMetadatas
 */
export class CharacterMetadatas extends Message<CharacterMetadatas> {
  /**
   * @generated from field: repeated dm.character.CharacterMetadata list = 1;
   */
  list: CharacterMetadata[] = [];

  constructor(data?: PartialMessage<CharacterMetadatas>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dm.character.CharacterMetadatas";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: CharacterMetadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CharacterMetadatas {
    return new CharacterMetadatas().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CharacterMetadatas {
    return new CharacterMetadatas().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CharacterMetadatas {
    return new CharacterMetadatas().fromJsonString(jsonString, options);
  }

  static equals(a: CharacterMetadatas | PlainMessage<CharacterMetadatas> | undefined, b: CharacterMetadatas | PlainMessage<CharacterMetadatas> | undefined): boolean {
    return proto3.util.equals(CharacterMetadatas, a, b);
  }
}

/**
 * @generated from message dm.character.CharacterMetadata
 */
export class CharacterMetadata extends Message<CharacterMetadata> {
  /**
   * @generated from field: uint32 avatar_id = 1;
   */
  avatarId = 0;

  /**
   * @generated from field: string avatar_name = 2;
   */
  avatarName = "";

  /**
   * adventure_player_id: u32,
   * pub avatar_votag: String,
   * pub rarity: u8,
   * json_path: AssetPath,
   * pub damage_type: Element,
   * pub spneed: u32,
   * exp_group: u32,
   * max_promotion: u8,
   * max_rank: u8,
   * pub rank_idlist: Vec<u32>,
   * reward_list: Vec<Item>,
   * reward_list_max: Vec<Item>,
   * pub skill_list: Vec<u32>,
   * pub avatar_base_type: Path,
   * pub avatar_desc: String,
   * damage_type_resistance: Vec<DamageTypeResistance>,
   * pub release: bool,
   * avatar_cutin_intro_text: String,
   *
   * @generated from field: string avatar_full_name = 3;
   */
  avatarFullName = "";

  constructor(data?: PartialMessage<CharacterMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dm.character.CharacterMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "avatar_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "avatar_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "avatar_full_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CharacterMetadata {
    return new CharacterMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CharacterMetadata {
    return new CharacterMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CharacterMetadata {
    return new CharacterMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: CharacterMetadata | PlainMessage<CharacterMetadata> | undefined, b: CharacterMetadata | PlainMessage<CharacterMetadata> | undefined): boolean {
    return proto3.util.equals(CharacterMetadata, a, b);
  }
}

